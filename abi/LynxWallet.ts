/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common.ts";

export interface LynxWalletInterface extends utils.Interface {
  functions: {
    "call(address,uint256,bytes)": FunctionFragment;
    "eoa()": FunctionFragment;
    "isTwoFactorAuthenticated(bytes)": FunctionFragment;
    "nonEOASenderHash()": FunctionFragment;
    "nonce()": FunctionFragment;
    "recoverEOA(bytes32,address)": FunctionFragment;
    "send(address,uint256)": FunctionFragment;
    "spendingLimitPerHandler()": FunctionFragment;
    "updateSpendingLimit(uint256)": FunctionFragment;
    "username1()": FunctionFragment;
    "username1Hash()": FunctionFragment;
    "username2()": FunctionFragment;
    "username2Hash()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "call"
      | "eoa"
      | "isTwoFactorAuthenticated"
      | "nonEOASenderHash"
      | "nonce"
      | "recoverEOA"
      | "send"
      | "spendingLimitPerHandler"
      | "updateSpendingLimit"
      | "username1"
      | "username1Hash"
      | "username2"
      | "username2Hash"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "call",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "eoa", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isTwoFactorAuthenticated",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "nonEOASenderHash",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nonce", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recoverEOA",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "send",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "spendingLimitPerHandler",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateSpendingLimit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "username1", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "username1Hash",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "username2", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "username2Hash",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "call", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "eoa", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isTwoFactorAuthenticated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nonEOASenderHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "recoverEOA", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "spendingLimitPerHandler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSpendingLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "username1", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "username1Hash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "username2", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "username2Hash",
    data: BytesLike
  ): Result;

  events: {
    "ExternalCall(address,address,uint256,bytes,bytes)": EventFragment;
    "ResetEOA(address,address,uint256)": EventFragment;
    "SpendingLimitUpdated(address,uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "TwoFactorAuthMessageSubmitted(address,bytes32,uint256,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ExternalCall"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ResetEOA"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SpendingLimitUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "TwoFactorAuthMessageSubmitted"
  ): EventFragment;
}

export interface ExternalCallEventObject {
  from: string;
  to: string;
  value: BigNumber;
  callData: string;
  ret: string;
}
export type ExternalCallEvent = TypedEvent<
  [string, string, BigNumber, string, string],
  ExternalCallEventObject
>;

export type ExternalCallEventFilter = TypedEventFilter<ExternalCallEvent>;

export interface ResetEOAEventObject {
  from: string;
  eoa: string;
  timestamp: BigNumber;
}
export type ResetEOAEvent = TypedEvent<
  [string, string, BigNumber],
  ResetEOAEventObject
>;

export type ResetEOAEventFilter = TypedEventFilter<ResetEOAEvent>;

export interface SpendingLimitUpdatedEventObject {
  from: string;
  spendingLimit: BigNumber;
  timestamp: BigNumber;
}
export type SpendingLimitUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  SpendingLimitUpdatedEventObject
>;

export type SpendingLimitUpdatedEventFilter =
  TypedEventFilter<SpendingLimitUpdatedEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  amount: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface TwoFactorAuthMessageSubmittedEventObject {
  from: string;
  sender: string;
  count: BigNumber;
  data: string;
}
export type TwoFactorAuthMessageSubmittedEvent = TypedEvent<
  [string, string, BigNumber, string],
  TwoFactorAuthMessageSubmittedEventObject
>;

export type TwoFactorAuthMessageSubmittedEventFilter =
  TypedEventFilter<TwoFactorAuthMessageSubmittedEvent>;

export interface LynxWallet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LynxWalletInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    call(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    eoa(overrides?: CallOverrides): Promise<[string]>;

    isTwoFactorAuthenticated(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    nonEOASenderHash(overrides?: CallOverrides): Promise<[string]>;

    nonce(overrides?: CallOverrides): Promise<[BigNumber]>;

    recoverEOA(
      sender: PromiseOrValue<BytesLike>,
      newEOA: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    send(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    spendingLimitPerHandler(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateSpendingLimit(
      spendingLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    username1(overrides?: CallOverrides): Promise<[string]>;

    username1Hash(overrides?: CallOverrides): Promise<[string]>;

    username2(overrides?: CallOverrides): Promise<[string]>;

    username2Hash(overrides?: CallOverrides): Promise<[string]>;
  };

  call(
    to: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  eoa(overrides?: CallOverrides): Promise<string>;

  isTwoFactorAuthenticated(
    data: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  nonEOASenderHash(overrides?: CallOverrides): Promise<string>;

  nonce(overrides?: CallOverrides): Promise<BigNumber>;

  recoverEOA(
    sender: PromiseOrValue<BytesLike>,
    newEOA: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  send(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  spendingLimitPerHandler(overrides?: CallOverrides): Promise<BigNumber>;

  updateSpendingLimit(
    spendingLimit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  username1(overrides?: CallOverrides): Promise<string>;

  username1Hash(overrides?: CallOverrides): Promise<string>;

  username2(overrides?: CallOverrides): Promise<string>;

  username2Hash(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    call(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    eoa(overrides?: CallOverrides): Promise<string>;

    isTwoFactorAuthenticated(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    nonEOASenderHash(overrides?: CallOverrides): Promise<string>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    recoverEOA(
      sender: PromiseOrValue<BytesLike>,
      newEOA: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    send(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    spendingLimitPerHandler(overrides?: CallOverrides): Promise<BigNumber>;

    updateSpendingLimit(
      spendingLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    username1(overrides?: CallOverrides): Promise<string>;

    username1Hash(overrides?: CallOverrides): Promise<string>;

    username2(overrides?: CallOverrides): Promise<string>;

    username2Hash(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "ExternalCall(address,address,uint256,bytes,bytes)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: PromiseOrValue<BigNumberish> | null,
      callData?: null,
      ret?: null
    ): ExternalCallEventFilter;
    ExternalCall(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: PromiseOrValue<BigNumberish> | null,
      callData?: null,
      ret?: null
    ): ExternalCallEventFilter;

    "ResetEOA(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      eoa?: PromiseOrValue<string> | null,
      timestamp?: PromiseOrValue<BigNumberish> | null
    ): ResetEOAEventFilter;
    ResetEOA(
      from?: PromiseOrValue<string> | null,
      eoa?: PromiseOrValue<string> | null,
      timestamp?: PromiseOrValue<BigNumberish> | null
    ): ResetEOAEventFilter;

    "SpendingLimitUpdated(address,uint256,uint256)"(
      from?: PromiseOrValue<string> | null,
      spendingLimit?: PromiseOrValue<BigNumberish> | null,
      timestamp?: PromiseOrValue<BigNumberish> | null
    ): SpendingLimitUpdatedEventFilter;
    SpendingLimitUpdated(
      from?: PromiseOrValue<string> | null,
      spendingLimit?: PromiseOrValue<BigNumberish> | null,
      timestamp?: PromiseOrValue<BigNumberish> | null
    ): SpendingLimitUpdatedEventFilter;

    "Transfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): TransferEventFilter;

    "TwoFactorAuthMessageSubmitted(address,bytes32,uint256,bytes32)"(
      from?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<BytesLike> | null,
      count?: PromiseOrValue<BigNumberish> | null,
      data?: null
    ): TwoFactorAuthMessageSubmittedEventFilter;
    TwoFactorAuthMessageSubmitted(
      from?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<BytesLike> | null,
      count?: PromiseOrValue<BigNumberish> | null,
      data?: null
    ): TwoFactorAuthMessageSubmittedEventFilter;
  };

  estimateGas: {
    call(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    eoa(overrides?: CallOverrides): Promise<BigNumber>;

    isTwoFactorAuthenticated(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nonEOASenderHash(overrides?: CallOverrides): Promise<BigNumber>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    recoverEOA(
      sender: PromiseOrValue<BytesLike>,
      newEOA: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    send(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    spendingLimitPerHandler(overrides?: CallOverrides): Promise<BigNumber>;

    updateSpendingLimit(
      spendingLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    username1(overrides?: CallOverrides): Promise<BigNumber>;

    username1Hash(overrides?: CallOverrides): Promise<BigNumber>;

    username2(overrides?: CallOverrides): Promise<BigNumber>;

    username2Hash(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    call(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    eoa(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isTwoFactorAuthenticated(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nonEOASenderHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recoverEOA(
      sender: PromiseOrValue<BytesLike>,
      newEOA: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    send(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    spendingLimitPerHandler(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateSpendingLimit(
      spendingLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    username1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    username1Hash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    username2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    username2Hash(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
