/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common.ts";

export interface LynxWalletFactoryInterface extends utils.Interface {
  functions: {
    "CREATE_TYPEHASH()": FunctionFragment;
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "authenticateCreateRequest(address,string,uint8,bytes32,bytes32)": FunctionFragment;
    "create()": FunctionFragment;
    "executor()": FunctionFragment;
    "flush(bytes32)": FunctionFragment;
    "getLynxWalletForHandle(bytes32)": FunctionFragment;
    "getMessageHash(address,string)": FunctionFragment;
    "handlesBackingCount(address)": FunctionFragment;
    "lynxWallet(address)": FunctionFragment;
    "updateEOAForLynxWallet(address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "CREATE_TYPEHASH"
      | "DOMAIN_SEPARATOR"
      | "authenticateCreateRequest"
      | "create"
      | "executor"
      | "flush"
      | "getLynxWalletForHandle"
      | "getMessageHash"
      | "handlesBackingCount"
      | "lynxWallet"
      | "updateEOAForLynxWallet"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "CREATE_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "authenticateCreateRequest",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "create", values?: undefined): string;
  encodeFunctionData(functionFragment: "executor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "flush",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLynxWalletForHandle",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMessageHash",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "handlesBackingCount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "lynxWallet",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateEOAForLynxWallet",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "CREATE_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authenticateCreateRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "create", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "executor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "flush", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLynxWalletForHandle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMessageHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handlesBackingCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lynxWallet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateEOAForLynxWallet",
    data: BytesLike
  ): Result;

  events: {
    "LynxWalletCreateRequest(bytes32,uint256,uint256)": EventFragment;
    "LynxWalletCreated(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LynxWalletCreateRequest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LynxWalletCreated"): EventFragment;
}

export interface LynxWalletCreateRequestEventObject {
  sender: string;
  vote: BigNumber;
  block: BigNumber;
}
export type LynxWalletCreateRequestEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  LynxWalletCreateRequestEventObject
>;

export type LynxWalletCreateRequestEventFilter =
  TypedEventFilter<LynxWalletCreateRequestEvent>;

export interface LynxWalletCreatedEventObject {
  walletAddress: string;
  block: BigNumber;
}
export type LynxWalletCreatedEvent = TypedEvent<
  [string, BigNumber],
  LynxWalletCreatedEventObject
>;

export type LynxWalletCreatedEventFilter =
  TypedEventFilter<LynxWalletCreatedEvent>;

export interface LynxWalletFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LynxWalletFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CREATE_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    authenticateCreateRequest(
      eoa: PromiseOrValue<string>,
      username: PromiseOrValue<string>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    create(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executor(overrides?: CallOverrides): Promise<[string]>;

    flush(
      sender: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getLynxWalletForHandle(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getMessageHash(
      eoa: PromiseOrValue<string>,
      username: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    handlesBackingCount(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lynxWallet(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    updateEOAForLynxWallet(
      prevEOA: PromiseOrValue<string>,
      newEOA: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  CREATE_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  authenticateCreateRequest(
    eoa: PromiseOrValue<string>,
    username: PromiseOrValue<string>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  create(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executor(overrides?: CallOverrides): Promise<string>;

  flush(
    sender: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getLynxWalletForHandle(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getMessageHash(
    eoa: PromiseOrValue<string>,
    username: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  handlesBackingCount(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lynxWallet(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  updateEOAForLynxWallet(
    prevEOA: PromiseOrValue<string>,
    newEOA: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    CREATE_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    authenticateCreateRequest(
      eoa: PromiseOrValue<string>,
      username: PromiseOrValue<string>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    create(overrides?: CallOverrides): Promise<void>;

    executor(overrides?: CallOverrides): Promise<string>;

    flush(
      sender: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    getLynxWalletForHandle(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getMessageHash(
      eoa: PromiseOrValue<string>,
      username: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    handlesBackingCount(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lynxWallet(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updateEOAForLynxWallet(
      prevEOA: PromiseOrValue<string>,
      newEOA: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "LynxWalletCreateRequest(bytes32,uint256,uint256)"(
      sender?: null,
      vote?: PromiseOrValue<BigNumberish> | null,
      block?: PromiseOrValue<BigNumberish> | null
    ): LynxWalletCreateRequestEventFilter;
    LynxWalletCreateRequest(
      sender?: null,
      vote?: PromiseOrValue<BigNumberish> | null,
      block?: PromiseOrValue<BigNumberish> | null
    ): LynxWalletCreateRequestEventFilter;

    "LynxWalletCreated(address,uint256)"(
      walletAddress?: PromiseOrValue<string> | null,
      block?: PromiseOrValue<BigNumberish> | null
    ): LynxWalletCreatedEventFilter;
    LynxWalletCreated(
      walletAddress?: PromiseOrValue<string> | null,
      block?: PromiseOrValue<BigNumberish> | null
    ): LynxWalletCreatedEventFilter;
  };

  estimateGas: {
    CREATE_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    authenticateCreateRequest(
      eoa: PromiseOrValue<string>,
      username: PromiseOrValue<string>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    create(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executor(overrides?: CallOverrides): Promise<BigNumber>;

    flush(
      sender: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getLynxWalletForHandle(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMessageHash(
      eoa: PromiseOrValue<string>,
      username: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    handlesBackingCount(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lynxWallet(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateEOAForLynxWallet(
      prevEOA: PromiseOrValue<string>,
      newEOA: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CREATE_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    authenticateCreateRequest(
      eoa: PromiseOrValue<string>,
      username: PromiseOrValue<string>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    create(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    flush(
      sender: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getLynxWalletForHandle(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMessageHash(
      eoa: PromiseOrValue<string>,
      username: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    handlesBackingCount(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lynxWallet(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateEOAForLynxWallet(
      prevEOA: PromiseOrValue<string>,
      newEOA: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
